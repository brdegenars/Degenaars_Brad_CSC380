
package gen.service.client;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.transform.sax.SAXSource;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.7.6
 * 2013-08-12T12:40:13.284-06:00
 * Generated source version: 2.7.6
 * 
 */
public final class RestaurantWebService_RestaurantWebServiceImplPort_Client {

    private static final QName SERVICE_NAME = new QName("http://serviceImpl/", "RestaurantWebService");

    private RestaurantWebService_RestaurantWebServiceImplPort_Client() {
    }

    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = RestaurantWebService_Service.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        RestaurantWebService_Service ss = new RestaurantWebService_Service(wsdlURL, SERVICE_NAME);
        RestaurantWebService port = ss.getRestaurantWebServiceImplPort();
        String restaurantLiteral, appetizerListLiteral, entreeListLiteral;
        List<App> appps = new ArrayList<>();
        List<Entree> entreeList = new ArrayList<>();

        {
        System.out.println("Invoking getRestaurants...");
        java.util.List<gen.service.client.Restaurant> _getRestaurants__return = port.getRestaurants();
        System.out.println("getRestaurants.result=" + _getRestaurants__return);

            for(Restaurant restaurant : _getRestaurants__return){
                System.out.println("\n" + restaurant.getName() + "\n");
                Menu menu = restaurant.getMenu();
                List<App> apps = menu.getAvailableApps();
                List<Entree> entrees = menu.getAvailableEntrees();

                System.out.println("Appetizers");
                for (App app: apps){
                    System.out.println(app.getName() + " (" + app.getPrice() + ")");
                }

                System.out.println("\nEntrees");
                for (Entree entree : entrees){
                    System.out.println(entree.getName() + " (" + entree.getPrice() + ")");
                }
            }

            do{
            restaurantLiteral = promptUser("Which restaurant would you like to order from? :");
            } while (!validateRestaurant(restaurantLiteral, _getRestaurants__return));

            do{
                appetizerListLiteral = promptUser("Which appetizers would you like? : ");
                String[] appetizers = appetizerListLiteral.split(",");
                for(String app: appetizers){
                    App newApp = new App();
                    newApp.setName(app);
                    appps.add(newApp);
                }
            } while (appetizerListLiteral.isEmpty());

            do{
                entreeListLiteral = promptUser("Which entrees would you like? :");
                String[] entreeLiteralList = entreeListLiteral.split(",");
                for(String entree : entreeLiteralList){
                    Entree entree1 = new Entree();
                    entree1.setName(entree);
                    entreeList.add(entree1);
                }
            } while (entreeList.isEmpty());
        }

        {
            System.out.println("Invoking placeOrder...");
            gen.service.client.Order _placeOrder_order = new gen.service.client.Order();

            _placeOrder_order.setRestaurantName(restaurantLiteral);
            _placeOrder_order.apps = appps;
            _placeOrder_order.entrees = entreeList;

            port.placeOrder(_placeOrder_order);


        }

        System.exit(0);
    }

    public static boolean validateRestaurant(String restaurantName, List<Restaurant> restaurants){

        for(Restaurant restaurant : restaurants){
            if(restaurantName.equalsIgnoreCase(restaurant.getName()))
                return true;
        }
        return false;
    }

    public static String promptUser(String message){

        Scanner scanner = new Scanner(System.in);
        System.out.println(message);
        return scanner.nextLine();

    }

}
